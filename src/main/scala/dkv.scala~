package peer_services.kv
import peer_services.dynamo._, com.twitter.finagle
import finagle.http.{Request, Response, Method}, finagle.http.path._
object Modules {
  val bucketOPS = new PartialFunction[(Method, Path), OP] {
    case Method.Post -> root / "api" / "v1" / "buckets" => WRITE 
    case Method.Delete -> root / "api" / "v1" / "buckets"/ p => DELETE  
  }

  val kvOPS = new PartialFunction[ (Method, Path), OP] {
    case Method.Put -> root / "api" / "v1" / "kv" / b / k => WRITE
    case Method.Get -> root / "api" / "v1" / "kv" / b / k => READ
    case Method.Delete -> root / "api" / "v1" / "kv" / b / k => DELETE
    case Method.Get -> root / "api" / "v1" / "kv" / b => READ 
  }

  def getOP(req: Request) = {
    val data = (req.method, Path(req.path) )
    val nf = ( bucketOPS orElse kvOPS)
    nf(data)
  }
  
}
